#include "stdafx.h"
#include <iostream>
using namespace std;

struct Node
{
	int data;
	Node* link;
};
typedef Node* NodePtr;

void head_insert (NodePtr &h, int num)
{
	NodePtr temp = new Node;
	temp->data = num;
	temp->link = h;
	h = temp;
}

void tail_insert(NodePtr &h, int n)
{
	if(h == nullptr)
	{
		head_insert(h, n);
		return;
	}
	else
	{
		NodePtr iter = h;
		while(iter->link != nullptr)
			iter = iter->link;
		NodePtr temp = new Node;
		temp->data = n;
		temp->link = iter->link;
		iter->link = temp;
	}
}

void print_list(NodePtr h)
{
	if(h == nullptr)
	{
		cout << "Empty LinkList! " << endl;
		return;
	}
	else
	{
		NodePtr iter = h;
		cout << "LinkList: ";
		while(iter != nullptr)
		{
 			cout << iter->data << "\t";
			iter = iter->link;
		}
		cout << endl;
	}
}

void insert(NodePtr afterMe, int n)
{
	NodePtr temp = new Node;
	temp->data = n;
	temp->link = afterMe->link;
	afterMe->link = temp;
}

void deleteLink(NodePtr &h)
{
	while(h != nullptr)
	{
		NodePtr temp = h;
		h = h->link;
		delete temp;
	}
}

int removeLastNode(NodePtr& head)
{
	
	if(head == NULL)
		return -1;
	int num;
	if(head->link == NULL)
	{
		num = head->data;
		delete head;
		head = NULL;
		return num;
	}

	NodePtr iter = head;
	while(iter->link->link != NULL)
		iter = iter->link;
	num = iter->link->data;
	delete iter->link;
	iter->link = NULL;
	return num;
}

void deleteLastNode(NodePtr &h)
{
	if(h == nullptr)
		return;
	else if(h->link == nullptr)
	{
		NodePtr temp = h;
		h = h->link;
		delete temp;
	}
	else
	{
		NodePtr iter = h;
		while(iter->link->link != nullptr)
			iter = iter->link;
		NodePtr temp = iter->link;
		iter->link = iter->link->link;
		delete temp;
	}
}

Node* mergeLists(NodePtr &h1, NodePtr &h2)
{
	NodePtr iter1 = h1;
	NodePtr iter2 = h2;
	NodePtr temp = nullptr;
	while(iter1 != nullptr && iter2 != nullptr)
	{
		if(iter1->data < iter2->data)
		{
			tail_insert(temp,iter1->data);
			iter1 = iter1->link;
		}
		else
		{
			tail_insert(temp,iter2->data);
			iter2 = iter2->link;
		}
	}
	while(iter1 != nullptr)
	{
		tail_insert(temp,iter1->data);
		iter1 = iter1->link;
	}
	while(iter2 != nullptr)
	{
		tail_insert(temp,iter2->data);
		iter2 = iter2->link;
	}
	return temp;
}

void remove(NodePtr& h, int d)
{
	while(h != nullptr)
	{
		if(h->data == d)
		{
			NodePtr temp = h;
			h = h->link;
			delete temp;
		}
		else
			break;
	}

	if(h == nullptr)
		return;
	else
	{
		NodePtr iter = h;
		for(iter; iter->link != nullptr; iter = iter->link)
		{
			if(iter->link->data == d)
			{
				NodePtr temp = iter->link;
				iter->link = iter->link->link;
				delete temp;
			}
		}
	}
}

void removeLastNum(NodePtr &h, int d)
{
	if(h == nullptr)
		return;
	NodePtr temp;
	if(h->data == d)
		temp = h;
	NodePtr iter = h;
	for(iter; iter->link != nullptr; iter = iter->link)
		if(iter->link->data == d)
			temp = iter;
	if(temp == h)
	{
		h = h->link;
		delete temp;
	}
	else
	{
		NodePtr temp2 = temp->link;
		temp->link = temp->link->link;
		delete temp2;
	}
}

void increasing_insert(NodePtr &h, int d)
{
	if(h == nullptr)
		head_insert(h,d);
	else if(h->data >= d)
		head_insert(h,d);
	else
	{
		NodePtr iter = h;
		for(iter; iter->link != nullptr; iter = iter->link)
		{
			if(iter->link->data >= d)
			{
				NodePtr temp = new Node;
				temp->data = d;
				temp->link = iter->link;
				iter->link = temp;
				return;
			}
		}
		tail_insert(h,d);
	}
}

NodePtr reverse(NodePtr& h)
{
	NodePtr temp = nullptr;
	NodePtr iter = h;
	for(iter; iter != nullptr; iter = iter->link)
		head_insert(temp, iter->data);
	h = temp;
	return temp;
}


void insert_after(NodePtr &h, int tag, int n)
{
	if(h == nullptr)
		return;
	NodePtr iter = h;
	for(iter; iter != nullptr; iter = iter->link)
	{
		if(iter->data == tag)
		{
			NodePtr temp = new Node;
			temp->data = n;
			temp->link = iter->link;
			iter->link = temp;
			iter = iter->link;
		}
	}
}

void insert_before(NodePtr& h, int tag, int n)
{
	if(h == nullptr)
		return;
	NodePtr iter = h;
	if(h->data == tag)
		head_insert(h, n);
	for(iter; iter->link != nullptr; iter = iter->link)
	{
		if(iter->link->data == tag)
		{
			NodePtr temp = new Node;
			temp->data = n;
			temp->link = iter->link;
			iter->link = temp;
			iter = iter->link;
		}
	}
}

NodePtr copyLinkedList(NodePtr oh)
{
	NodePtr h = nullptr;
	NodePtr iter = oh;
	while(iter != nullptr)
	{
		tail_insert(h, iter->data);
		iter = iter->link;
	}
	return h;
}

void insert_grouped(NodePtr& h, int d)
{
	if(h == nullptr)
	{
		head_insert(h,d);
		return;
	}
	if(d % 2 == 1)
		head_insert(h,d);
	else
		tail_insert(h,d);
}
	

int _tmain(int argc, _TCHAR* argv[])
{
	NodePtr h = nullptr;
	for (int k = 1; k <= 10; k++)
	insert_grouped(h, k);
	print_list(h);



	int a = 10;
	NodePtr head = NULL;
	print_list(head);
	increasing_insert(head, 1);
	increasing_insert(head, 2);
	increasing_insert(head, 0);
	increasing_insert(head, 10);
	increasing_insert(head, 7);
	increasing_insert(head, -10);
	increasing_insert(head, 7);

	print_list(head);
	NodePtr head1 = NULL;
	

	head_insert(head1, 8);
	head_insert(head1, 1);
	head_insert(head1, 8);
	head_insert(head1, 8);
	print_list(head1);
	insert_before(head1,8,3);
	print_list(head1);
	NodePtr head2 = NULL;
	NodePtr head3 = NULL;
	head_insert(head3,3);
	head_insert(head3,2);
	head_insert(head3,1);
	print_list(head3);
	head2 = copyLinkedList(head3);
	print_list(head2);

	NodePtr head4 = NULL;
	head_insert(head4, 1);
	print_list(head4);
	int b = removeLastNode(head3);
	cout << b << endl;
	print_list(head3);

	head_insert(head2, 7);
	head_insert(head2, 2);

	NodePtr head6 = NULL;
	NodePtr head7 = NULL;
	head_insert(head6, 9);
	head_insert(head6, 7);
	head_insert(head6, 5);
	head_insert(head6, 3);
	head_insert(head6, 1);
	head_insert(head7, 8);
	head_insert(head7, 6);
	head_insert(head7, 4);
	head_insert(head7, 2);
	head_insert(head7, 0);
	NodePtr head5 = mergeLists(head6, head7);
	cout << "5";
	print_list(head5);
	
	reverse(head5);
	print_list(head5);
	system("pause");
	return 0;
}
