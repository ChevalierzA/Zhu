

/*void mergeSort(int *Rank, float* Grade, int L, int R)
{
    if(L < R)
    {
        int M = (L+R)/2;
        mergeSort(Rank, Grade, L, M);
        mergeSort(Rank, Grade, M+1, R);
        merge(Rank, Grade, L, M, R);
    }
}


void merge(int *Rank, float* Grade, int L, int M, int R)
{
    int i,j,k;
    int n1 = M-L+1;
    int n2 = R-M;

    int Lr[n1], Rr[n2];
    float Lf[n1], Rf[n2];

    for(i = 0; i < n1; i++)
    {
        Lr[i] = Rank[L + i];
        Lf[i] = Grade[L + i];
    }
    for(j = 0; j < n2; j++)
    {
        Rr[j] = Rank[M + 1 + j];
        Rf[j] = Grade[M + 1 + j];
    }
    i = 0;
    j = 0;
    k = L;
    while(i < n1 && j < n2)
    {
        if(Lf[i] <= Rf[j])
        {
            Rank[k++] = Lr[i++];
        }
        else
        {
            Rank[k++] = Rr[j++];
        }
    }

    while(i < n1)
    {
        Rank[k++] = Lr[i++];
    }
    while(j < n2)
    {
        Rank[k++] = Rr[j++];
    }

}*/




void compute_ranks(float *F, int N, int *R, float *avg, float *passing_avg, int *num_passed) {
    int i, j;
    int Right = N;
    int Left = 0;
    float avg2 = 0.0;
    float pass_avg = 0.0;
    int passed = 0;

    //*num_passed = 0;
    //*avg = 0.0;
    //*passing_avg = 0.0;

    // init ranks
    /*for (i = 0; i < N; i++) {
        R[i] = 1;
    }*/

    // compute ranks
    for (i = 0; i < N - 4; i+=4) {
        int rank1 = 1;
        int rank2 = 1;
        int rank3 = 1;
        int rank4 = 1;
        float grade1 = F[i];
        float grade2 = F[i+1];
        float grade3 = F[i+2];
        float grade4 = F[i+3];

        for (j = 0; j < N; j++) {
            if (grade1 < F[j]) {
                rank1++;
            }
            if (grade2 < F[j]) {
                rank2++;
            }
            if (grade3 < F[j]) {
                rank3++;
            }
            if (grade4 < F[j]){
                rank4++;
            }
        }
        R[i] = rank1;
        R[i+1] = rank2;
        R[i+2] = rank3;
        R[i+3] = rank4;
    }
    for(; i < N; i++)
    {
        int rank = 1;
        float grade = F[i];
        for(j = 0; j < N; j++){
            if(grade < F[j]){
                rank++;
            }
        }
        R[i] = rank; 
    }
  /*  for(i = 0; i < N; i++)
    {
        R[i] = i+1;
    }*/

    //mergeSort(R, F, Left, Right);
    // compute averages
    for (i = 0; i < N-2; i+=2) {
        float grade1 = F[i];
        float grade2 = F[i+1];
        avg2 = avg2 + grade1 + grade2;
        if (grade1 >= 50.0) {
            pass_avg += grade1;
            passed ++;
        }
        if(grade2 >= 50.0){
            pass_avg += grade2;
            passed ++;
        }
    }

    // check for div by 0
    if (N > 0) avg2 /= N;
    if (passed) pass_avg /= passed;
    *num_passed = passed;
    *passing_avg = pass_avg;
    *avg = avg2;
} // compute_ranks

